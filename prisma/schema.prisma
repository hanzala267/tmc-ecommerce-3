generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String?
  phone         String?
  role          Role      @default(CONSUMER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  business Business?
  orders   Order[]
  reviews  Review[]
  cartItems CartItem[]
}

model Business {
  id                 String         @id @default(cuid())
  userId             String         @unique
  businessName       String
  businessType       BusinessType
  registrationNumber String?
  taxId              String?
  address            String
  city               String
  state              String
  zipCode            String
  contactPerson      String
  website            String?
  description        String?
  status             BusinessStatus @default(PENDING)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents BusinessDocument[]
}

model BusinessDocument {
  id         String   @id @default(cuid())
  businessId String
  fileName   String
  fileUrl    String
  fileType   String
  createdAt  DateTime @default(now())

  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id           String      @id @default(cuid())
  name         String
  description  String
  price        Float
  originalPrice Float?
  categoryId   String
  userType     UserType    @default(CONSUMER)
  size         String
  weight       String?
  inStock      Boolean     @default(true)
  stockCount   Int         @default(0)
  images       String[]
  recipes      String[]    @default([])
  tags         String[]    @default([])
  featured     Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  category   Category     @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
  reviews    Review[]
  cartItems  CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Order {
  id              String        @id @default(cuid())
  userId          String
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  totalAmount     Float
  shippingAddress Json
  paymentMethod   PaymentMethod @default(COD)
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  confirmedAt     DateTime?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  cancelledAt     DateTime?

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  adminReply AdminReply?

  @@unique([userId, productId])
}

model AdminReply {
  id        String   @id @default(cuid())
  reviewId  String   @unique
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

enum Role {
  CONSUMER
  BUSINESS
  ADMIN
}

enum BusinessType {
  RESTAURANT
  CATERING
  RETAIL
  DISTRIBUTOR
  OTHER
}

enum BusinessStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserType {
  CONSUMER
  BUSINESS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  COD
  CARD
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}
